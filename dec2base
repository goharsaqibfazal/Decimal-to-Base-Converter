/*
 ============================================================================
 Name        : dec2base.c
 Author      : Gohar Saqib Fazal
 Student ID  : 260840565
 Description : This program takes in two arguments from the user on the
 command line interface(CLI) and converts the decimal number input by
 the user to target base.
 ============================================================================
 */
//import libraries to be used in the assignment
#include <stdio.h>
#include <stdlib.h>

//this function prints the remainders obtained in the dec2base function in reverse order
void revStr(char *str, int length){

	/*Malloc function returns a pointer to a newly allocated block size bytes long,
	 *or a null pointer if the block could not be allocated.
	 */
	char* str_rev = (char*)malloc(sizeof(char)*length);
	int i;

	//when the length of characters is 0 the method prints 0 on the screen instead of blank space.
	if(length==0){
		printf("%d",0);
	}

	//iterating through all the characters one by one to print the characters in reverse order
	for( i = 0 ; i < length ; i++){
		str_rev[i] = str[length-i-1];
		printf("%c",str_rev[i]);
	}
}

/*This function converts the decimal number into the required base by the user.
 * The reverse string function is also called in this function
 */
void dec2base(int number,int base,char *str){

	//initializing the variables
	int quotient = number;
	int i = 0;

	/*The while loop divides the number repeatedly until the quotient gets to 0
	 * and the condition of the while loop is no longer true
	 */
	while(quotient > 0){
		int remainder = quotient%base;
		quotient = quotient/base;
		char reverseChar;

		/*The following if else statement allows for the inclusion
		 * of letters to represent numbers that are bigger than 10.
		 */
		if(remainder < 10){
			reverseChar = '0'+remainder;
		}

		else{
			reverseChar = 'A'+(remainder-10);
		}

		str[i] = reverseChar;
		i++;
	}
	revStr(str,i);
}
int main(int argc, char *argv[]){

	int a,b;

	/*The following if and else statements allow for different outputs on different argument counts:
	 * if the argument count is 3 the command line interface reads two arguments(one argument for the decimal number and one for the base)
	 * if the argument count is 2 the command line interface reads one argument for the decimal number and sets the base to 2
	 * if the argument count is none of the above the command line interface prints an error on the screen
	 */
	if(argc==3){
		sscanf(argv[1],"%d",&a);
		sscanf(argv[2],"%d",&b);
	}
	else if(argc==2){
		sscanf(argv[1], "%d", &a);
		b = 2;
	}
	else {
		printf("Error: wrong number of arguments\n");
		return(0);
	}

	//makes sure the input decimal number is within the required range.
	if(a > 2147483647 || a < 0){
		printf("Error: number must be in the range of [0,2147483647]\n");
		return(0);
	}

	//makes sure that the input target base is within the required range.
	if(b > 36 || b < 2){
		printf("Error: base must be in the range [2,36]\n");
		return(0);
	}

	//initializing the variables to be used in the while loop
	int quotient = a;
	int length = 0;

	//this while loop in the main function continues until the expression inside the while loop is true.
	while(quotient > 0){
		int remainder = quotient%b;
		quotient = quotient/b;
		length++;
	}

	//calling the dec2base function already defined above the main function and then printing the value on the screen.
	char* str = (char*)(malloc(sizeof(char)*length));
	printf("The Base-%d form of %d is: ",b,a);
	dec2base(a,b,str);
	printf("\n");
	return(0);
}
